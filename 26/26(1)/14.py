k = 100
data = [list(map(int, x.split())) for x in open('14')]
costs = [x[1] / x[0] for x in data]
total = []
for i in range(len(data)):
    total.append([*data[i], costs[i]])
total.sort(key=lambda x: (x[2], -x[0]))  # просто сигма сортировка, сделавшая всю задачу в соло

"""
Хочу отдельно поговорить об этой шикарной, блистательной, помпезной, элегантной, изысканной,
роскошной, великолепной, потрясающей, эстетичной сортировке.
Как я до неё догадался. Я просто вспомнил, порылся, скажем так, в мозгу. 
Что она делает? Во-первых, в лямбде функции от х, где х является нашей строкой,
одним эллементом двумерного массива, являющимся списком, главный приоритет отдаётся
сортировке по стоимости (таковы условия задачи), в моём случае стоимость 
имеет индекс 2. Затем производится сортировка по убыванию для веса (таковы
условия задачи), в случае текстового файла имеет индекс 0.
Я крайне доволен в ненадобности флага реверса, т.к. он бы испортил,
а вместо него можно просто влепить минус перед тем эллементом,
который мы хотим сортировать по убыванию и сделать тип данных в аргументе
лямбда функции таплом и после всех этих незначительных танцев с бубноми,
мы получаем идеально отсортированный список под наши критерии.
Я очень доволен своей кладезью знаний.
"""

arr = total[:k]
for i in arr:
    print(i)
print(sum([x[0] for x in arr]), arr[0][0])
# задача тупо в несколько строк, код можно еще подукоротить если не создавать costs и сделать total через спис. выраж.
